{
  "hash": "d625ef748d3816db7c56702d2628577a",
  "result": {
    "markdown": "---\ntitle: \"Models with multiple predictors\"\nsubtitle: \"Lecture 19\"\ndate: \"November 3, 2022\"\nformat: revealjs\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Warm up\n\n## While you wait for class to begin...\n\n-   Clone your `ae-18` project from GitHub, render your document, update your name, and commit and push.\n-   Post any questions you have about the material so far at [sli.do / #sta199](https://app.sli.do/event/oKXbMbrd8RMEDfLPgEetpn).\n\n## Announcements\n\n-   Team evaluations open -- due Sat night, 11:59pm (so we can review before Monday's lab)\n-   HW 5 will be posted soon\n-   HW 6\n\n## Questions from last time {.smaller}\n\n**Q: What is a two-way table?**\n\nA: A table of frequencies for two categorical variables.\n\n. . .\n\n::: question\nHow do we go from what's on the left to what's on the right?\n:::\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\npenguins |>\n  count(species, sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n  species   sex        n\n  <fct>     <fct>  <int>\n1 Adelie    female    73\n2 Adelie    male      73\n3 Adelie    <NA>       6\n4 Chinstrap female    34\n5 Chinstrap male      34\n6 Gentoo    female    58\n7 Gentoo    male      61\n8 Gentoo    <NA>       5\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  species   female  male  `NA`\n  <fct>      <int> <int> <int>\n1 Adelie        73    73     6\n2 Chinstrap     34    34    NA\n3 Gentoo        58    61     5\n```\n:::\n:::\n\n:::\n:::\n\n## Questions from last time {.smaller}\n\n**Q: How do we build a two-way table in a pipeline?**\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  count(species, sex) |>\n  pivot_wider(names_from = sex, values_from = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  species   female  male  `NA`\n  <fct>      <int> <int> <int>\n1 Adelie        73    73     6\n2 Chinstrap     34    34    NA\n3 Gentoo        58    61     5\n```\n:::\n:::\n\n\n## Questions from last time {.smaller}\n\n**Q: How do we know whether we can scrape data from a website?**\n\n. . .\n\nA: Technically, with `robotstxt::paths_allowed()`, but that doesn't address ethical considerations which are just as important, if not more.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrobotstxt::paths_allowed(\"https://www.duke.edu/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Questions from last time {.smaller}\n\n**Q: What is the proper notation for writing out a model?**\n\n. . .\n\n-   Population models (truth):\n\n\n$$\ny = \\beta_0 + \\beta_1 \\times x + \\epsilon\n$$\n\n\n-   Sample models (estimated):\n\n\n$$\n\\hat{y} = b_0 + b_1 \\times x\n$$\n\n\n## Goals\n\n-   Fit and interpret models for predicting binary outcomes\n\n-   Introduce over fitting and mitigating it by splitting the data into training and testing sets\n\n# Logistic regression\n\n## What is logistic regression?\n\n::: columns\n::: {.column width=\"50%\"}\n-   Similar to linear regression....\n    but\n\n-   Modeling tool when our response is categorical\n:::\n\n::: {.column width=\"50%\"}\n![](images/18/logistic.png){fig-align=\"center\"}\n:::\n:::\n\n## Modelling binary outcomes\n\n-   Variables with binary outcomes follow the B**ernouilli distribution**:\n\n    -   $y_i \\sim Bern(p)$\n\n    -   $p$: Probability of success\n\n    -   $1-p$: Probability of failure\n\n-   We can't model $y$ directly, so instead we model $p$\n\n## Linear model\n\n\n$$\np_i = \\beta_o + \\beta_1 \\times X_1 + \\cdots + \\epsilon\n$$\n\n\n-   But remember that $p$ must be between 0 and 1\n\n-   We need a **link function** that transforms the linear model to have an appropriate range\n\n## Logit link function\n\nThe **logit** function take values between 0 and 1 (probabilities) and maps them to values in the range negative infinity to positive infinity:\n\n\n$$\nlogit(p) = log \\bigg( \\frac{p}{1 - p} \\bigg)\n$$\n\n\n\n\n## This isn't exactly what we need though.....\n\n-   Recall, the goal is to take values between -$\\infty$ and $\\infty$ and map them to probabilities.\n\n-   We need the opposite of the link function... or the *inverse*\n\n-   Taking the inverse of the logit function will map arbitrary real values back to the range \\[0, 1\\]\n\n## Generalized linear model\n\n-   We model the logit (log-odds) of $p$ :\n\n\n$$\nlogit(p) = log \\bigg( \\frac{p}{1 - p} \\bigg) = \\beta_o + \\beta_1 \\times X1_i + \\cdots + \\epsilon \n$$\n\n\n-   Then take the inverse to obtain the predicted $p$:\n\n\n$$\np_i = \\frac{e^{\\beta_o + \\beta_1 \\times X1_i + \\cdots + \\epsilon}}{1 + e^{\\beta_o + \\beta_1 \\times X1_i + \\cdots + \\epsilon}}\n$$\n\n\n## A logistic model visualized\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](19-logistic-regression_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n## Takeaways\n\n-   Generalized linear models allow us to fit models to predict non-continuous outcomes\n\n-   Predicting binary outcomes requires modeling the log-odds of success, where p = probability of success\n\n## Review questions\n\n::: question\nWhat is a **training** data set?\n:::\n\n. . .\n\n\"Sandbox\" for model building.\nBuild the model on these data.\n\n. . .\n\n::: question\nWhat is a **testing** data set?\n:::\n\n. . .\n\nHeld in reserve to test one or two chosen models and to evaluate their performance.\n",
    "supporting": [
      "19-logistic-regression_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}