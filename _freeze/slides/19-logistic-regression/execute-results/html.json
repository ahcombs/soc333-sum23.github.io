{
  "hash": "422b542cb6d03a3e05d2c1dabbd851e9",
  "result": {
    "markdown": "---\ntitle: \"Models with multiple predictors\t\t\t\t\t\t\t\"\nsubtitle: \"Lecture 19\"\ndate: \"November 3, 2022\"\nformat: revealjs\n---\n\n\n# Warm up\n\n## While you wait for class to begin...\n\n-   Clone your `ae-18` project from GitHub, render your document, update your name, and commit and push.\n-   Post any questions you have about the material so far at [sli.do / #sta199](https://app.sli.do/event/oKXbMbrd8RMEDfLPgEetpn).\n\n## Announcements\n\n-   ...\n\n## Goals\n\n-   Fit and interpret models for predicting binary outcomes\n\n-   Introduce overfitting and mitigating it by splitting the data into training and testing sets\n\n## Warm up questions\n\n::: question\nWhat is a **training** data set?\n:::\n\n. . .\n\n\"Sandbox\" for model building.\nBuild the model on these data.\n\n. . .\n\n::: question\nWhat is a **testing** data set?\n:::\n\n. . .\n\nHeld in reserve to test one or two chosen models and to evaluate their performance.\n\n# Logistic regression\n\n## What is logistic regression?\n\n::: columns\n::: {.column width=\"50%\"}\n-   Similar to linear regression....\n    but\n\n-   Modeling tool when our response is categorical\n:::\n\n::: {.column width=\"50%\"}\n![](images/18/logistic.png){fig-align=\"center\"}\n:::\n:::\n\n## Modelling binary outcomes\n\n-   Variables with binary outcomes follow the B**ernouilli distribution**:\n\n    -   $y_i \\sim Bern(p)$\n\n    -   $p$: Probability of success\n\n    -   $1-p$: Probability of failure\n\n-   We can't model $y$ directly, so instead we model $p$\n\n## Linear model\n\n$$\np_i = \\beta_o + \\beta_1 \\times X_1 + \\cdots\n$$\n\n-   But remember that $p$ must be between 0 and 1\n\n-   We need a **link function** that transforms the linear model to have an appropriate range\n\n## Logit link function\n\nThe **logit** function take values between 0 and 1 (probabilities) and maps them to values in the range negative infinity to positive infinity:\n\n$$\nlogit(p) = log \\bigg( \\frac{p}{1 - p} \\bigg)\n$$\n\n\n\n\n\n## This isn't exactly what we need though.....\n\n-   Recall, the goal is to take values between -$\\infty$ and $\\infty$ and map them to probabilities.\n\n-   We need the opposite of the link function... or the *inverse*\n\n-   Taking the inverse of the logit function will map arbitrary real values back to the range \\[0, 1\\]\n\n## Generalized linear model\n\n-   We model the logit (log-odds) of $p$ :\n\n$$\nlogit(p) = log \\bigg( \\frac{p}{1 - p} \\bigg) = \\beta_o + \\beta_1 \\times X1_i + \\cdots \n$$\n\n-   Then take the inverse to obtain the predicted $p$:\n\n$$\np_i = \\frac{e^{\\beta_o + \\beta_1 \\times X1_i + \\cdots}}{1 + e^{\\beta_o + \\beta_1 \\times X1_i + \\cdots}}\n$$\n\n## Example Figure:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](19-logistic-regression_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## Takeaways\n\n-   Generalized linear models allow us to fit models to predict non-continuous outcomes\n\n-   Predicting binary outcomes requires modeling the log-odds of success, where p = probability of success\n",
    "supporting": [
      "19-logistic-regression_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}