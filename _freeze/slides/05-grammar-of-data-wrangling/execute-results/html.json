{
  "hash": "fcd8925ba6e2c67ce45cdf0fc7f3de7f",
  "result": {
    "markdown": "---\ntitle: \"Grammar of data wrangling\"\nsubtitle: \"Lecture 5\"\ndate: \"September 13, 2022\"\nformat: revealjs\n---\n\n\n# Warm up\n\n\n::: {.cell}\n\n:::\n\n\n## While you wait for class to begin...\n\n::: nonincremental\n-   Clone your `ae-03` repo.\n-   Any questions from prepare materials? Go to [slido.com](https://www.slido.com/) / #sta199. You can also upvote others' questions.\n:::\n\n## Announcements\n\n-   Request videos for missed classes via the **video request form**\n-   Ask course questions **on Slack**\n    -   Using code formatting and proper indentation\n\n    -   Taking screenshots\n\n    -   Checking for previous questions\n\n## Questions from last time\n\n-   How come I had to **load** my packages each session before basic functions like `ggplot()` become available?\n-   Will we spend time learning more of the actual fundamental statistics needed to understand how the different graphs work and which ones are most useful for different data sets?\n\n## Coding style + workflow\n\n::: incremental\n-   Avoid long lines of code.\n\n    -   We should be able to see [all]{.underline} of your code in the PDF document you submit.\n\n-   Label code chunks.\n\n    -   Do **not** put spaces in the code-chunk `label`s.\n\n-   Render, commit, and push regularly.\n\n    -   Think about it like clicking to save regularly as you type a report.\n:::\n\n# Application exercise\n\n## `ae-03`\n\n::: appex\n-   Go to the course [GitHub org](https://github.com/sta199-f22-1) and find your `ae-03` (repo name will be suffixed with your GitHub name).\n-   Clone the repo in your container, open the Quarto document in the repo, and follow along and complete the exercises.\n-   Render, commit, and push your edits by the AE deadline (3 days from today).\n:::\n\n## Recap of AE {.smaller}\n\n-   The pipe operator, `|>`, can be read as \"and then\".\n-   The pipe operator passes what comes before it into the function that comes after it as the first argument in that function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n1 |> \n  sum(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n-   Always use a line break after the pipe, and indent the next line of code.\n    -   Just like always use a line break between layers of ggplots, after `+`, and indent the next line.\n",
    "supporting": [
      "05-grammar-of-data-wrangling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}