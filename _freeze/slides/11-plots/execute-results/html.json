{
  "hash": "643af36baef831d46b00c17f42e68092",
  "result": {
    "markdown": "---\ntitle: \"Plotting a single variable\"\nsubtitle: \"Lecture 11\"\ndate: \"June 6, 2023\"\nformat: revealjs\nsmaller: true\n---\n\n\n\n\n## Logistics {.smaller}\n\n-   Project component 2: descriptive statistics\n\n    -   Due **Thursday June 8** 11:59pm\n    -   this is the last time it's moving--thank you for your patience. :)\n\n## Today {.smaller}\n\n-   Getting help with R\n-   Single variable plots\n-   Factors\n\n## Finding help in R\n\n-   #1: Your classmates and I!\n\n    -   Copy/pasting from slides or exercises and editing the pieces you need is a good strategy\n\n. . .\n\n-   Documentation! Use `?`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?median\n```\n:::\n\n\n## Finding help in R\n\n-   Cheatsheets!\n\n    -   Relevant ones are on the course website: [Computing -\\> Cheatsheets](https://soc333-sum23.github.io/computing-cheatsheets.html)\n    -   More at <https://posit.co/resources/cheatsheets/>\n\n. . .\n\n-   Google!\n\n    -   Try \"how to calculate the median in r\" rather than \"r how to calculate median\"\n    -   StackOverflow/StackExchange is good\n    -   Paste in your error message\n    -   **Cite your sources**\n\n. . .\n\n-   A book!\n\n    -   [R for Data Science](https://r4ds.had.co.nz/)\n\n## Finding help in R\n\n-   Campus resources!\n\n    -   [Center for Data Visualization Sciences](https://library.duke.edu/data/about)\n    -   [Innovation CoLab](https://colab.duke.edu/)\n    -   [Social Science Research Institute (SSRI) consults](https://ssri.duke.edu/research/consulting-training/)\n\n. . .\n\n-   ChatGPT??\n\n. . .\n\n```         \n-   ...eh. It can WRITE code, but it can't test it... \n-   So what it gives you probably won't work, or won't work correctly, at least not right out of the box\n-   Might be useful for inspiration/finding a starting place, but not for doing your work for you (just like with writing!)\n-   **Cite your sources**\n```\n\n# Plots\n\n## Why plot?\n\n![](images/10/homeownership_table.png)\n\n::: aside\ntable from IMS ch 4\n:::\n\n## Why plot?\n\n![](images/10/homeownership_plot.png)\n\n::: aside\nfigure from IMS ch 4\n:::\n\n# Plotting a single variable\n\n## Categorical data: bar charts\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## Numeric data: histograms\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## How? With ggplot!\n\nThe basic structure of a plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = DATASET, \n  # aes stands for aesthetics--it is where you tell R what plot features should represent what variables. \n  aes(\n    # sometimes--like in the single variable plots we're making today--you \n    # only need to specify one variable (x or y). \n    # If you plot more than one variable you'll specify more than one thing here.\n    # eg, maybe x and y variables and a third variable for color\n    x = X.VARIABLE, \n    y = Y.VARIABLE, \n    fill = FILL.COLOR.VARIABLE,\n    OTHER.STUFF)) + # add more elements to the plot with +\n  # geoms tell R what kind of plot you want to make. More options in the ggplot cheatsheet.\n  geom_XXXX() \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# the same thing but without the messy comments\n\nggplot(data = DATASET, \n       aes(x = X.VARIABLE, \n           y = Y.VARIABLE, \n           fill = FILL.COLOR.VARIABLE,\n           OTHER.STUFF)) +\n  geom_XXXX() \n```\n:::\n\n\n## Back to the bar chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = acs12, # we want to plot the acs12 dataset\n       aes(x = employment)) + # and specifically the employment variable, which should be on the x axis\n  geom_bar() # and we want that plot to be a bar chart\n```\n\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n. . .\n\n-   It's there but it's ugly!\n\n## Cleaning up the bar chart\n\n-   Once we have a basic plot, we can add more elements to make it nicer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = acs12, aes(x = employment)) + \n  geom_bar() + \n  # this layer changes our axis labels\n  labs(y = \"\", # make the y axis labels blank\n       x = \"Labor force status\") # Change the x axis label\n```\n\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## Cleaning up the bar chart\n\n-   What about that NA bar?\n-   There are NAs in our plot because there are NAs in our data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(acs12$employment, useNA = \"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nnot in labor force         unemployed           employed               <NA> \n               656                106                843                395 \n```\n:::\n:::\n\n\n## Cleaning up the bar chart\n\n-   We can use `filter()` to get rid of them before plotting the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first we filter out the NAs\nacs12_filtered <- filter(acs12, !is.na(employment))\n\n# then we plot that new dataset\nggplot(data = acs12_filtered, aes(x = employment)) + \n  geom_bar() + \n  labs(y = \"\", \n       x = \"Labor force status\",\n       # and let's add a title too\n       title = \"Number of people in each employment category\"\n       ) \n```\n\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n## Cleaning up the bar chart\n\n-   We could have also used a pipe to do the same thing in one command\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we start with acs12\nacs12 |> \n  # then we filter out the NAs\n  filter(!is.na(employment)) |> \n  # then we make our plot\n  ggplot(aes(x = employment)) + \n  geom_bar() + \n  labs(y = \"\", \n       x = \"Labor force status\",\n       # and let's add a title too\n       title = \"Number of people in each employment category\"\n  ) \n```\n\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n## Back to the histogram\n\n-   It has exactly the same structure!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = acs12, aes(x = hrs_work)) + \n  #notice that the geom is different--this is what specifies what kind of plot you want\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## Cleaning up the histogram\n\n-   Two messages come up:\n\n    -   `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n    -   Warning: Removed 1041 rows containing non-finite values (`stat_bin()`).\n\n. . .\n\n-   Let's start with the second one\n\n    -   When there are NA variables in categorical variables, R plots them as another category, in their own bar\n    -   But when there are NA variables in numeric variables, R doesn't know what to do\n    -   So here it's warning us that it dropped \"non-finite\" (ie, NA) values itself\n\n## Cleaning up the histogram\n\n-   It's better if we do that explicitly though\n-   Same as the bar chart, let's filter out the NAs before plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs_filtered <- filter(acs12, !is.na(hrs_work))\n\nggplot(data = acs_filtered, aes(x = hrs_work)) + \n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n## Cleaning up the histogram\n\n-   Now what about that other message?\n\n    -   `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hmm. Let's check the function documentation. \n# Since it didn't give us this message last time, \n# it must have something to do with the histogram function.\n?geom_histogram\n```\n:::\n\n\n## Cleaning up the histogram\n\n-   The function documentation tells us that geom_histogram gives you two ways to set the width of the bars: `bins` and `binwidth`.\n\n    -   `binwidth` sets the width of each bar: eg, each bar should represent 5 hours worked, or 10\n    -   We could use `bins` instead to tell R how many bars there should be--10 bars, 20 bars, etc\n\n-   The message is telling us that R took its best dumb guess, but we should pick something better.\n\n## Cleaning up the histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs_filtered <- filter(acs12, !is.na(hrs_work))\n\nggplot(data = acs_filtered, aes(x = hrs_work)) + \n  # the binwidth argument goes inside the geom_histogram function\n  # let's say that each bar should equal five hours--so 0-5 hours, 5-10, etc\n  geom_histogram(binwidth = 5) \n```\n\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n## Cleaning up the histogram\n\n-   What if we picked 8 instead? (logic being that 8 is a standard workday)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs_filtered <- filter(acs12, !is.na(hrs_work))\n\nggplot(data = acs_filtered, aes(x = hrs_work)) + \n  geom_histogram(binwidth = 10) \n```\n\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## Cleaning up the histogram\n\n-   What about 1?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs_filtered <- filter(acs12, !is.na(hrs_work))\n\nggplot(data = acs_filtered, aes(x = hrs_work)) + \n  geom_histogram(binwidth = 1) \n```\n\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n## Cleaning up the histogram\n\n-   Now we've eliminated all the messages--let's add labels!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs_filtered <- filter(acs12, !is.na(hrs_work))\n\nggplot(data = acs_filtered, aes(x = hrs_work)) + \n  geom_histogram(binwidth = 5) + \n  labs(x = \"Number of hours worked per week\",\n       y = \"Number of people\",\n       title = \"Distribution of hours worked per week\",\n       subtitle = \"American Community Survey 2012\")\n```\n\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n# Exercise: Plotting one variable\n\n# Factors\n\n## Factors\n\n-   Remember our bar plot of helmet wearing habits from the exercise:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = yrbss, aes(x = helmet_12m)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n## Factors\n\n-   Categorical variables (those where the values are words/letters/numbers in quotation marks) default to being ordered alphabetically\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(yrbss)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 13,583\nColumns: 13\n$ age                      <int> 14, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 1…\n$ gender                   <chr> \"female\", \"female\", \"female\", \"female\", \"fema…\n$ grade                    <chr> \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", …\n$ hispanic                 <chr> \"not\", \"not\", \"hispanic\", \"not\", \"not\", \"not\"…\n$ race                     <chr> \"Black or African American\", \"Black or Africa…\n$ height                   <dbl> NA, NA, 1.73, 1.60, 1.50, 1.57, 1.65, 1.88, 1…\n$ weight                   <dbl> NA, NA, 84.37, 55.79, 46.72, 67.13, 131.54, 7…\n$ helmet_12m               <chr> \"never\", \"never\", \"never\", \"never\", \"did not …\n$ text_while_driving_30d   <chr> \"0\", NA, \"30\", \"0\", \"did not drive\", \"did not…\n$ physically_active_7d     <int> 4, 2, 7, 0, 2, 1, 4, 4, 5, 0, 0, 0, 4, 7, 7, …\n$ hours_tv_per_school_day  <chr> \"5+\", \"5+\", \"5+\", \"2\", \"3\", \"5+\", \"5+\", \"5+\",…\n$ strength_training_7d     <int> 0, 0, 0, 0, 1, 0, 2, 0, 3, 0, 3, 0, 0, 7, 7, …\n$ school_night_hours_sleep <chr> \"8\", \"6\", \"<5\", \"6\", \"9\", \"8\", \"9\", \"6\", \"<5\"…\n```\n:::\n:::\n\n:::\n:::\n\n## Factors\n\n-   But we can change that!\n-   *Factors* are a specific type of R object. They are categorical with response options that are represented by words/letters/numbers in quotation marks, but they allow you to assign those options any order you'd like.\n-   Useful for ordinal variables\n-   To change the order of the bars, we change the order of the response options in the data set before we plot.\n\n## Factors\n\n-   We can use `mutate()` with a new function, `factor()`, for this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(yrbss$helmet_12m, useNA = \"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n      always did not ride most of time        never       rarely    sometimes \n         399         4549          293         6977          713          341 \n        <NA> \n         311 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nyrbss_reordered <- mutate(yrbss,\n                          # we are turning our helmet variable into a factor\n                          # its name will remain the same (the new variable \n                          # we create will overwrite the old one)\n                          helmet_12m = factor(\n                            helmet_12m, \n                            # and we want its response options to be in this order\n                            # least to greatest frequency\n                            levels = c(\"did not ride\", \"never\", \"rarely\", \n                                       \"sometimes\", \"most of time\", \"always\")))\n\ntable(yrbss_reordered$helmet_12m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\ndid not ride        never       rarely    sometimes most of time       always \n        4549         6977          713          341          293          399 \n```\n:::\n:::\n\n\n## Factors\n\n::: columns\n::: {.column width=\"30%\"}\n-   Our new plot! I've added better labels as well.\n-   What is easier to see in this plot than the old one?\n-   Does the pattern surprise you?\n:::\n\n::: {.column width=\"70%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = yrbss_reordered, aes(x = helmet_12m)) + \n  geom_bar() + \n  labs(x = \"How frequently did you wear a helmet while riding your bike?\",\n       y = \"Number of students\",\n       title = \"Distribution of reported helmet wearing in the last 12 months\")\n```\n\n::: {.cell-output-display}\n![](11-plots_files/figure-revealjs/unnamed-chunk-24-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "11-plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}