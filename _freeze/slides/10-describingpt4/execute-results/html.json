{
  "hash": "1e6bc78f3b37c128b109ada254aca93c",
  "result": {
    "markdown": "---\ntitle: \"Describing data: part 4\"\nsubtitle: \"Lecture 10\"\ndate: \"June 5, 2023\"\nformat: revealjs\n---\n\n\n\n\n## Logistics {.smaller}\n\n-   Project component 2: descriptive statistics\n\n    -   All materials are posted (instructions, example, github repos)\n    -   I will have feedback to you on your research questions soon\n    -   After that, you'll be able to do parts 1-3. Material for part 4 will be Monday.\n    -   Due Tuesday June 6 11:59pm\n    -   We will save some time to work on it in class Monday or Tuesday--start before then, come with questions!\n\n## Today\n\n-   Answers to filtering\n-   Pipes\n-   Working on creating variables\n-   Answers to creating variables\n\n\n## Exercise: Creating new variables\n\n-   Clone and open the project repo now (**ex-6-1-yourusername**)\n-   Then open the .qmd file and try out some variable creation\n\n    -   [Instructions: Computing -\\> Cloning and committing](https://soc333-sum23.github.io/computing-clonerepo.html)\n \n## Stringing commands together with pipes (`|>`) {.smaller}\n\n::: incremental\n-   Often we need to change data frames in more than one way\n-   Back to our starting example: how does employment status vary by age category? \n-   We need to create an age category variable (as we talked about above)\n-   But we probably want to filter too--why analyze kids?\n:::\n\n## Stringing commands together: approach 1 {.smaller}\n\nWe can do this with the tools we have.\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_newagevar <- mutate(acs12, agecat = case_when(age < 14 ~ \"child\",\n                                                    age < 18 ~ \"teen\",\n                                                    age < 67 ~ \"adult\",\n                                                    TRUE ~ \"retired\"))\nacs12_nokids <- filter(acs12_newagevar, agecat != \"child\")\n\ntable(acs12_nokids$agecat, useNA = \"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  adult retired    teen    <NA> \n   1264     297      89       0 \n```\n:::\n:::\n\n   \n. . . \n\n-   But it's kind of ugly... we don't need to save that middle step\n\n## Stringing commands together: approach 2, with `|>` {.smaller}\n\n::: incremental\n-   The pipe operator, `|>`, lets us pass the result of one function directly into another one\n-   The `|` symbol is the key below \"delete\" on your keyboard (not I, not l, not 1)\n-   It replaces the first mutate/filter argument (the dataset)\n-   \"Take the thing that came before this and give it to the function that comes after this\"\n:::\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_nokids <- acs12 |> \n  mutate(agecat = case_when(age < 14 ~ \"child\",\n                            age < 18 ~ \"teen\",\n                            age < 67 ~ \"adult\",\n                            TRUE ~ \"retired\")) |> \n  filter(agecat != \"child\")\n\ntable(acs12_nokids$agecat, useNA = \"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  adult retired    teen    <NA> \n   1264     297      89       0 \n```\n:::\n:::\n\n\n## Another `|>` example {.smaller}\n\n-   This: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(acs12, agecat = case_when(age < 14 ~ \"child\",\n                                 age < 18 ~ \"teen\",\n                                 age < 67 ~ \"adult\",\n                                 TRUE ~ \"retired\"))\n```\n:::\n\n\n-   Is the same as this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12 |> \n  mutate(agecat = case_when(age < 14 ~ \"child\",\n                            age < 18 ~ \"teen\",\n                            age < 67 ~ \"adult\",\n                            TRUE ~ \"retired\"))\n```\n:::\n\n\n## More on `|>` {.smaller}\n\n::: incremental\n-   We're just scratching the surface in this class\n-   When you need to clean your data or when your analyses are more complex, `|>` makes your life a lot easier!\n-   Sometimes in internet resources more than ~2 years old, you'll see `%>%` instead--this older version does exactly the same thing\n-   Annoying to type out? There's a keyboard shortcut\n\n    -   on mac, command-shift-M\n    -   on pc, ctrl-shift-M\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}