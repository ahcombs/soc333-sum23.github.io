{
  "hash": "2a6171d7b5bd6435be172a7fdb690419",
  "result": {
    "markdown": "---\ntitle: \"Describing data: part 4\"\nsubtitle: \"Lecture 10\"\ndate: \"June 5, 2023\"\nformat: revealjs\nsmaller: true\n---\n\n\n\n\n## Logistics {.smaller}\n\n-   Project component 2: descriptive statistics\n\n    -   All materials are posted (instructions, example, github repos)\n    -   Due **Wednesday June 7** 11:59pm\n    -   I have returned feedback (GitHub issue on your repo) and grades (Sakai) for your proposals\n    -   We have covered everything for parts 1-3. Part 4 is today and tomorrow.\n    -   I'm around before/after class for questions (after generally better), or set up an appointment\n\n## Today {.smaller}\n\n-   Answers to filtering\n-   Pipes\n-   Working on creating variables\n-   Answers to creating variables\n-   Plots\n\n## Filtering exercise (ex-5-31): answers! {.smaller}\n\n-   Find this on your computer (no need to clone it again)\n\n## Stringing commands together with pipes (`|>`)\n\n::: incremental\n-   Often we need to change data frames in more than one way\n-   Example from last week: How does employment status vary by age category?\n-   We need to create an age category variable (as we talked about Thursday)\n-   But we probably want to filter too--why analyze kids?\n:::\n\n## Stringing commands together: approach 1\n\nWe can do this with the tools we have.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first we make the new variable\nacs12_newagevar <- mutate(acs12, agecat = case_when(age < 14 ~ \"child\",\n                                                    age < 18 ~ \"teen\",\n                                                    age < 67 ~ \"adult\",\n                                                    TRUE ~ \"retired\"))\n\n# then we filter to remove children\nacs12_nokids <- filter(acs12_newagevar, agecat != \"child\")\n\n# did it work?\ntable(acs12_nokids$agecat, useNA = \"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  adult retired    teen    <NA> \n   1264     297      89       0 \n```\n:::\n:::\n\n\n. . .\n\n-   But it's kind of ugly... we don't need to save that middle step\n\n## Stringing commands together: approach 2, with `|>`\n\n::: incremental\n-   The pipe operator, `|>`, lets us pass the result of one function directly into another one\n-   The `|` symbol is the key below \"delete\" on your keyboard (not I, not l, not 1)\n-   It replaces the first mutate/filter argument (the dataset)\n-   \"Take the thing that came before this and give it to the function that comes after this\"\n:::\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_nokids <- acs12 |> # start with acs12\n  mutate(agecat = case_when(age < 14 ~ \"child\", #then add a new variable to it\n                            age < 18 ~ \"teen\",\n                            age < 67 ~ \"adult\",\n                            TRUE ~ \"retired\")) |> \n  filter(agecat != \"child\") # then filter out the kids\n\ntable(acs12_nokids$agecat, useNA = \"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  adult retired    teen    <NA> \n   1264     297      89       0 \n```\n:::\n:::\n\n\n## Another `|>` example\n\n-   This:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(acs12, agecat = case_when(age < 14 ~ \"child\",\n                                 age < 18 ~ \"teen\",\n                                 age < 67 ~ \"adult\",\n                                 TRUE ~ \"retired\"))\n```\n:::\n\n\n-   Is the same as this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12 |> \n  mutate(agecat = case_when(age < 14 ~ \"child\",\n                            age < 18 ~ \"teen\",\n                            age < 67 ~ \"adult\",\n                            TRUE ~ \"retired\"))\n```\n:::\n\n\n## More on `|>` \n\n::: incremental\n-   We're just scratching the surface in this class\n\n-   When you need to clean your data or when your analyses are more complex, `|>` makes your life a lot easier!\n\n-   Sometimes in internet resources more than \\~2 years old, you'll see `%>%` instead--this older version does exactly the same thing\n\n-   Annoying to type out?\n    There's a keyboard shortcut\n\n    -   on mac, command-shift-M\n    -   on pc, ctrl-shift-M\n:::\n\n## Continuing on creating new variables {.smaller}\n\n-   Find your exercise from last Thursday (ex-6-01)\n\n    -   No need to clone it again; find where it's saved on your computer\n\n-   There are hints on the website--use them if you get stuck\n\n-   10-15 minutes to work\n\n# Creating new variables: answers!\n\n## Finding help in R\n\n-   #1: Your classmates and I!\n\n    -   Copy/pasting from slides and editing the pieces you need is a good strategy\n\n. . .\n\n-   Documentation! Use `?`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?median\n```\n:::\n\n\n## Finding help in R\n\n-   Cheatsheets!\n\n    -   Relevant ones are on the course website: [Computing -\\> Cheatsheets](https://soc333-sum23.github.io/computing-cheatsheets.html)\n    -   More at <https://posit.co/resources/cheatsheets/>\n\n. . .\n\n-   Google!\n\n    -   Try \"how to calculate the median in r\" rather than \"r how to calculate median\"\n    -   StackOverflow/StackExchange is good\n    -   Paste in your error message\n    -   **Cite your sources**\n\n. . .\n\n-   A book!\n\n    -   [R for Data Science](https://r4ds.had.co.nz/)\n\n. . .\n\n-   Campus resources!\n\n    -   [Center for Data Visualization Sciences](https://library.duke.edu/data/about)\n\n## Finding help in R\n\n-   ChatGPT??\n\n. . .\n\n```         \n-   ...eh. It can WRITE code, but it can't test it... so what it gives you probably won't work.\n```\n\n# Plots\n\n## Why plot?\n\n![](images/10/homeownership_table.png)\n\n::: aside\ntable from IMS ch 4\n:::\n\n## Why plot?\n\n![](images/10/homeownership_plot.png)\n\n::: aside\nfigure from IMS ch 4\n:::\n\n# Plotting a single variable\n\n## Categorical data: bar charts\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-describingpt4_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n## Numeric data: histograms\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-describingpt4_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## How? With ggplot!\n\nThe basic structure of a plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = DATASET, aes(x = X.VARIABLE, \n                           y = Y.VARIABLE,\n                           OTHER.STUFF)) + \n  geom_XXXX()\n```\n:::\n\n\n## Back to the bar chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = acs12, # we want to plot the acs12 dataset\n       aes(x = employment)) + # and specifically the employment variable, which should be on the x axis\n  geom_bar() # and we want that plot to be a bar chart\n```\n\n::: {.cell-output-display}\n![](10-describingpt4_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n. . .\n\n-   It's there but it's ugly!\n\n## Cleaning up the bar chart\n\n-   Once we have a basic plot, we can add code to make it nicer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = acs12, aes(x = employment)) + \n  geom_bar() + \n  # this changes our axis labels\n  labs(y = \"\", # make the y axis labels blank\n       x = \"Labor force status\") # Change the x axis label\n```\n\n::: {.cell-output-display}\n![](10-describingpt4_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n## Cleaning up the bar chart\n\n-   What about that NA bar?\n-   There are NAs in our plot because there are NAs in our data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(acs12$employment, useNA = \"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nnot in labor force         unemployed           employed               <NA> \n               656                106                843                395 \n```\n:::\n:::\n\n\n## Cleaning up the bar chart\n\n-   We can use `filter()` to get rid of them before plotting the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first we filter out the NAs\nacs12_filtered <- filter(acs12, !is.na(employment))\n\n# then we plot that new dataset\nggplot(data = acs12_filtered, aes(x = employment)) + \n  geom_bar() + \n  labs(y = \"\", \n       x = \"Labor force status\",\n       # and let's add a title too\n       title = \"Number of people in each employment category\"\n       ) \n```\n\n::: {.cell-output-display}\n![](10-describingpt4_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n## Cleaning up the bar chart\n\n-   We could have also used a pipe to do the same thing in one command\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we start with acs12\nacs12 |> \n  # then we filter out the NAs\n  filter(!is.na(employment)) |> \n  # then we make our plot\n  ggplot(aes(x = employment)) + \n  geom_bar() + \n  labs(y = \"\", \n       x = \"Labor force status\",\n       # and let's add a title too\n       title = \"Number of people in each employment category\"\n  ) \n```\n\n::: {.cell-output-display}\n![](10-describingpt4_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n## Back to the histogram\n\n-   It has exactly the same structure!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = acs12, aes(x = hrs_work)) + \n  #notice that the geom is different--this is what specifies what kind of plot you want\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](10-describingpt4_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n## Cleaning up the histogram\n\n-   Two messages come up:\n\n    -   `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n    -   Warning: Removed 1041 rows containing non-finite values (`stat_bin()`).\n\n. . .\n\n-   Let's start with the second one\n\n    -   When there are NA variables in categorical variables, R plots them as another category, in their own bar\n    -   But when there are NA variables in numeric variables, R doesn't know what to do\n    -   So here it's warning us that it dropped \"non-finite\" (ie, NA) values itself\n\n## Cleaning up the histogram\n\n-   It's better if we do that explicitly though\n-   Same as the bar chart, let's filter out the NAs before plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs_filtered <- filter(acs12, !is.na(hrs_work))\n\nggplot(data = acs_filtered, aes(x = hrs_work)) + \n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](10-describingpt4_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## Cleaning up the histogram\n\n-   Now what about that other message?\n\n    -   `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hmm. Let's check the function documentation. \n# Since it didn't give us this message last time, \n# it must have something to do with the histogram function.\n?geom_histogram\n```\n:::\n\n\n## Cleaning up the histogram\n\n-   The function documentation tells us that geom_histogram gives you two ways to set the width of the bars: `bins` and `binwidth`.\n\n    -   `binwidth` sets the width of each bar: eg, each bar should represent 5 hours worked, or 10\n    -   We could use `bins` instead to tell R how many bars there should be--10 bars, 20 bars, etc\n\n-   The message is telling us that R took its best dumb guess, but we should pick something better.\n\n## Cleaning up the histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs_filtered <- filter(acs12, !is.na(hrs_work))\n\nggplot(data = acs_filtered, aes(x = hrs_work)) + \n  # the binwidth argument goes inside the geom_histogram function\n  # let's say that each bar should equal five hours--so 0-5 hours, 5-10, etc\n  geom_histogram(binwidth = 5) \n```\n\n::: {.cell-output-display}\n![](10-describingpt4_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n## Cleaning up the histogram\n\n-   Now we've eliminated all the messages--let's add labels!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs_filtered <- filter(acs12, !is.na(hrs_work))\n\nggplot(data = acs_filtered, aes(x = hrs_work)) + \n  geom_histogram(binwidth = 5) + \n  labs(x = \"Number of hours worked per week\",\n       y = \"Number of people\",\n       title = \"Distribution of hours worked per week\",\n       subtitle = \"American Community Survey 2012\")\n```\n\n::: {.cell-output-display}\n![](10-describingpt4_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "10-describingpt4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}