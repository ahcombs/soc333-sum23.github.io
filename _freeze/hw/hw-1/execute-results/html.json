{
  "hash": "34a1fd6523237bfae826b40be21e00b8",
  "result": {
    "markdown": "---\ntitle: \"5/18/23\"\ncategories: \"Exercise\"\nexecute:\n  eval: false\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n# Exercise structure and requirements\n\nBefore we begin, a word about how this (and likely future) exercises will be structured, and what you are required to do with them.\n\nWe will walk through exercises in class and use them as opportunities to try out applying the lecture material.\nWe will do it this way because often, things make more sense if you can see right away how they are used to solve a problem.\n\nOnce you are set up on GitHub, you will access these files in RStudio, rather than through the course webpage (as you are probably doing now).\nThat means you will be able to (and will be required to) edit the files directly to answer the questions they provide.\nYou will have to edit these files in a few specified places (you may also edit them further to try things out or to take notes, if you wish--I will only grade the edits I ask for).\n\nProblems or questions that I expect you to address will be wrapped in a note (example below).\n\n::: callout-note\nThis is a note.\nNotes will contain exercises and questions you need to provide an answer to.\n:::\n\nFor this exercise, you will submit your response via the assignments tab in Sakai.\nAfter this, you will instead submit exercises by pushing your edits to GitHub.\nMore details to follow in future.\n\nYou will have to complete an exercise most days that we have class.\nI expect you should be able to complete most of it in class.\nYou should submit it before the start of the next class period.\nI will grade them for completion.\nIf you are absent from class, you are still required to complete the day's exercise, but will have to do so on your own.\n\n# Let's get set up!\n\nThis exercise will introduce you to the course computing workflow.\nWe will set up everything you need in order to start using R, RStudio, Git, and GitHub--four powerful programs that you will be learning to use to analyze data in this class.\n\nR is a programming language, like Python, C++, Java, and many others.\nThat means it can be used to do all kinds of things.\nIts primary strength, however, is data analysis, and it is used by many social scientists, statisticians, data scientists, and others to clean, model, transform, and visualize all kinds of data.\n\nRStudio is an interface for using R\\--basically, a nice text editor with bells and whistles that are specific to writing code.\nThere are other ways to write programs in R, but most people use RStudio because it is both free and powerful.\n\n::: callout-tip\nR is the name of the programming language itself and RStudio is a convenient interface.\n:::\n\nGit and GitHub are the collaboration and version control system that we will be using throughout the course.\nThey can be used for any kind of file--not just R.\nIt is likely you'll run into them if you ever do any work involving writing code that needs to be made available to others.\n\n::: callout-tip\nGit is a version control system (like \"Track Changes\" features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like Box but much better).\n:::\n\nToday, we simply aim to get these four tools set up and talking to one another.\nThis can be a little tedious, but I ask that you stick with it--it only needs to be done once, and we will take as much time as we need to ensure it works for everyone.\n\nGoals: By the end of the assignment, you will...\n\n-   Have a functioning R, RStudio, Git, and GitHub setup\n-   Be familiar with our course workflow using R, RStudio, Git, and GitHub\n-   Gain practice writing a reproducible report using Quarto\n-   Practice version control using GitHub\n-   Be able to create data visualizations using `ggplot2`\n\n# Getting started\n\n## Log in to RStudio\n\n-   Go to <https://cmgr.oit.duke.edu/containers> and log in with your Duke NetID and Password.\n-   Find RStudio in the `Reservations Available` pane and click \"reserve RStudio\"\n-   Click `RStudio` in the `My Reservations` pane to log into the Docker container. You should now see the RStudio environment.\n\n## Get familiar with RStudio\n\nSCREENSHOT HERE\n\nRStudio contains four panes which allow you to do different things.\n\n1.  **Editor**.\n    This is where you will make edits to files.\n    It will not appear until you open a file.\n    Code written here can be saved, run, edited, and saved again.\n    It is the main place where you will write and edit your work.\n\n2.  **Console.** Displays results of code you run.\n    You can also write and run code from here, but it will not be save-able.\n    It is useful for brief, tangential tasks that only need to happen once, like checking quick things, installing packages, and running code to change settings and configure things (like we will do later on in this exercise).\n\n3.  **Environment.** The environment gives you information about the data and variables you have created.\n    It also contains a pane you will use to save your work to GitHub.\n\n4.  **Files/plots/help.** This window contains a smorgasbord of other helpful panes that give you information on your files and packages and display plots and help documentation.\n\n## Set up your SSH key\n\nYou will authenticate GitHub using SSH.\nBelow are an outline of the authentication steps.\n\n::: callout-note\nYou only need to do this authentication process one time on a single system.\n:::\n\n-   Type `credentials::ssh_setup_github()` into your console.\n-   R will ask \"No SSH key found. Generate one now?\" You should click 1 for yes.\n-   You will generate a key. It will begin with \"ssh-rsa....\" R will then ask \"Would you like to open a browser now?\" You should click 1 for yes.\n-   You may be asked to provide your GitHub username and password to log into GitHub. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., `sta199`).\n\nYou can find more detailed instructions [here](https://github.com/DukeStatSci/github_auth_guide) if you're interested.\n\n## Configure Git\n\nThere is one more thing we need to do before getting started on the assignment.\nSpecifically, we need to configure your git so that RStudio can communicate with GitHub.\nThis requires two pieces of information: your name and email address.\n\nTo do so, you will use the `use_git_config()` function from the `usethis` package.\n(And we also need to install a package called `gert` just for this step.)\n\nType the following lines of code in the **console** in RStudio filling in your name and the email address associated with your GitHub account.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"r-lib/gert\")\n\nusethis::use_git_config(\n  user.name = \"Your name\", \n  user.email = \"Email associated with your GitHub account\"\n  )\n```\n:::\n\n\nFor example, mine would be\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"r-lib/gert\")\n\nusethis::use_git_config(\n  user.name = \"Mine Çetinkaya-Rundel\", \n  user.email = \"cetinkaya.mine@gmail.com\"\n  )\n```\n:::\n\n\nYou are now ready interact with GitHub via RStudio!\n\n## Clone the repo & start new RStudio project\n\n-   Go to the course organization at <https://github.com/soc333-sum23> organization on GitHub.\n    Click on the repo with the prefix **hw-1**.\n    It contains the starter documents you need to complete the homework.\n\n-   Click on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**).\n    Click on the clipboard icon to copy the repo URL.\n\n-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n\n-   Click *lab-0-datasaurus.qmd* to open the template Quarto file.\n    This is where you will write up your code and narrative for the lab.\n\n## R and R Studio\n\nBelow are the components of the RStudio IDE.\n\n![](images/lab-0/rstudio.png){fig-alt=\"RStudio IDE\"}\n\nBelow are the components of a Quarto (.qmd) file.\n\n![](images/lab-0/quarto.png){fig-alt=\"Quarto document\"}\n\n## YAML\n\nThe top portion of your R Markdown file (between the three dashed lines) is called **YAML**.\nIt stands for \"YAML Ain't Markup Language\".\nIt is a human friendly data serialization standard for all programming languages.\nAll you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n::: callout-important\nOpen the Quarto (`.qmd`) file in your project, change the author name to your name, and render the document.\nExamine the rendered document.\n:::\n\n## Committing changes\n\nNow, go to the Git pane in your RStudio instance.\nThis will be in the top right hand corner in a separate tab.\n\nIf you have made changes to your Quarto (.qmd) file, you should see it listed here.\nClick on it to select it in this list and then click on **Diff**.\nThis shows you the *diff*erence between the last committed state of the document and its current state including changes.\nYou should see deletions in red and additions in green.\n\nIf you're happy with these changes, we'll prepare the changes to be pushed to your remote repository.\nFirst, **stage** your changes by checking the appropriate box on the files you want to prepare.\nNext, write a meaningful commit message (for instance, \"updated author name\") in the **Commit message** box.\nFinally, click **Commit**.\nNote that every commit needs to have a commit message associated with it.\n\nYou don't have to commit after every change, as this would get quite tedious.\nYou should commit states that are *meaningful to you* for inspection, comparison, or restoration.\n\nNow let's make sure all the changes went to GitHub.\nGo to your GitHub repo and refresh the page.\nYou should see your commit message next to the updated files.\nIf you see this, all your changes are on GitHub and you're good to go!\n\n## Push changes\n\nNow that you have made an update and committed this change, it's time to push these changes to your repo on GitHub.\n\nIn order to push your changes to GitHub, you must have **staged** your **commit** to be pushed.\nclick on **Push**.\n\n# Packages\n\nIn this lab we will work with two packages:\n\n-   **datasauRus** which contains the dataset, and\n-   **tidyverse** which is a collection of packages for doing data analysis in a \"tidy\" way.\n\n**Render** the document which loads these two packages with the `library()` function.\n\n::: callout-note\nThe rendered document will include a message about which packages the tidyverse packages is loading along with it.\nIt's just R being informative, a **message** does not indicate anything is wrong (it's not a **warning** or an **error**).\n:::\n\nThe tidyverse is a meta-package.\nWhen you load it you get eight packages loaded for you:\n\n-   **ggplot2**: for data visualization\n-   **dplyr**: for data wrangling\n-   **tidyr**: for data tidying and rectangling\n-   **readr**: for reading and writing data\n-   **tibble**: for modern, tidy data frames\n-   **stringr**: for string manipulation\n-   **forcats**: for dealing with factors\n-   **purrr**: for iteration with functional programming\n\nThe message that's printed when you load the package tells you which versions of these packages are loaded as well as any conflicts they may have introduced, e.g., the `filter()` function from dplyr has now masked (overwritten) the `filter()` function available in base R (and that's ok, we'll use `dplyr::filter()` anyway).\n\nYou can now **Render** your template document and see the results.\n\n# Data\n\nThe data frame we will be working with today is called `datasaurus_dozen` and it's in the datasauRus package.\nActually, this single data frame contains 13 datasets, designed to show us why data visualization is important and how summary statistics alone can be misleading.\nThe different datasets are marked by the `dataset` variable.\n\n::: callout-note\nIf it's confusing that the data frame is called `datasaurus_dozen` when it contains 13 datasets, you're not alone!\nHave you heard of a [baker's dozen](https://www.mentalfloss.com/article/32259/why-bakers-dozen-13)?\n:::\n\nLet's also load these packages in the **Console**.\nYou can do this by either typing the following in the console or clicking on the play button (green triangle) on the code chunk that loads the packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(tidyverse)\n# library(datasauRus)\n```\n:::\n\n\nTo find out more about the dataset, type the following in your console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ?datasaurus_dozen\n```\n:::\n\n\nA question mark before the name of an object will always bring up its help file.\nThis command must be run in the console.\nAlternatively, you can use the `help()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# help(datasaurus_dozen)\n```\n:::\n\n\n# Exercises\n\n1.  Based on the help file, how many rows and how many columns does the `datasaurus_dozen` file have? What are the variables included in the data frame? Add your responses to your lab report.\n\n::: render-commit-push\nWhen you're done, commit your changes with the commit message \"Added answer for Ex 1\",\n\nThen, **push** these changes.\n:::\n\nLet's take a look at what these datasets are.\nTo do so we can check th e `distinct()` values of the `dataset` variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# #| eval: true\n# \n# datasaurus_dozen |>\n#   distinct(dataset)\n```\n:::\n\n\nThe original Datasaurus (`dino`) was created by Alberto Cairo in [this great blog post](http://www.thefunctionalart.com/2016/08/download-datasaurus-never-trust-summary.html).\nThe other Dozen were generated using simulated annealing and the process is described in the paper *Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics* through Simulated Annealing by Justin Matejka and George Fitzmaurice.[^1]\nIn the paper, the authors simulate a variety of datasets that the same summary statistics to the Datasaurus but have very different distributions.\n\n[^1]: Matejka, Justin, and George Fitzmaurice.\n    \"Same stats, different graphs: Generating datasets with varied appearance and identical statistics through simulated annealing.\" Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems.\n    ACM, 2017.\n\n## Data visualization and summary\n\n2.  Plot `y` vs. `x` for the `dino` dataset. Then, calculate the correlation coefficient between `x` and `y` for this dataset.\n\nBelow is the code you will need to complete this exercise.\nBasically, the answer is already given, but you need to include relevant bits in your document and successfully render it and view the results.\n\nStart with the `datasaurus_dozen` and **pipe** it into the `filter` function to filter for observations where `dataset == \"dino\"`.\nStore the resulting filtered data frame as a new data frame called `dino_data`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dino_data <- datasaurus_dozen |>\n#   filter(dataset == \"dino\")\n```\n:::\n\n\nThere is a lot going on here, so let's slow down and unpack it a bit.\n\nFirst, the pipe operator: `|>`, takes what comes before it and sends it as the first argument to what comes after it.\nSo here, we're saying `filter` the `datasaurus_dozen` data frame for observations where `dataset == \"dino\"`.\n\nSecond, the assignment operator: `<-`, assigns the name `dino_data` to the filtered data frame.\n\nNext, we need to visualize these data.\nWe will use the `ggplot` function for this.\nIts first argument is the data you're visualizing.\nNext we define the `aes`thetic mappings.\nIn other words, the columns of the data that get mapped to certain aesthetic features of the plot, e.g. the `x` axis will represent the variable called `x` and the `y` axis will represent the variable called `y`.\nThen, we add another layer to this plot where we define which `geom`etric shapes we want to use to represent each observation in the data.\nIn this case we want these to be points, hence `geom_point`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot(data = dino_data, mapping = aes(x = x, y = y)) +\n#   geom_point()\n```\n:::\n\n\nFor the second part of this exercise, we need to calculate a summary statistic: the correlation coefficient.\nCorrelation coefficient, often referred to as $r$ in statistics, measures the linear association between two variables.\nYou will see that some of the pairs of variables we plot do not have a linear relationship between them.\nThis is exactly why we want to visualize first: visualize to assess the form of the relationship, and calculate $r$ only if relevant.\nIn this case, calculating a correlation coefficient really doesn't make sense since the relationship between `x` and `y` is definitely not linear (it's dinosaurial)!\n\nFor illustrative purposes only, let's calculate the correlation coefficient between `x` and `y`.\n\n::: callout-note\nStart with \\`dino_data\\` and calculate a summary statistic that we will call \\`r\\` as the \\`cor\\`relation between \\`x\\` and \\`y\\`.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dino_data |>\n#   summarize(r = cor(x, y))\n```\n:::\n\n\n::: render-commit-push\nThis is a good place to pause, **render**, and **commit** changes with the commit message \"Added answer for Ex 2.\"\n\nThen, **push** these changes when you're done.\n:::\n\n3.  Plot `y` vs. `x` for the `circle` dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between `x` and `y` for this dataset. How does this value compare to the `r` of `dino`?\n\n::: render-commit-push\nThis is another good place to pause, **render**, and **commit** changes with the commit message \"Added answer for Ex 3.\"\n\nThen, **push** these changes when you're done.\n:::\n\n4.  Plot `y` vs. `x` for the `star` dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between `x` and `y` for this dataset. How does this value compare to the `r` of `dino`?\n\n::: render-commit-push\nYou should pause again, **render**, **commit** changes with the commit message \"Added answer for Ex 4\".\n\nThen, **push**.\n:::\n\nFinally, let's plot all datasets at once.\nIn order to do this we will make use of faceting, given by the code below:\n\n::: callout-note\nFacet by the dataset variable, placing the plots in a 3 column grid, and don't add a legend.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset))+\n#   geom_point()+\n#   facet_wrap(~ dataset, ncol = 3) +\n#   theme(legend.position = \"none\")\n```\n:::\n\n\nAnd we can use the `group_by` function to generate all the summary correlation coefficients.\nWe'll go through these functions next week when we learn about data wrangling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# datasaurus_dozen |>\n#   group_by(dataset) |>\n#   summarize(r = cor(x, y)) \n```\n:::\n\n\n5.  Include the faceted plot and the summary of the correlation coefficients in your lab write-up by including relevant code in R chunks (and give them appropriate labels). In the narrative below the code chunks, *briefly* comment on what you notice about the plots and the correlations between `x` and `y` values within each of them (one or two sentences is fine!).\n\nYou're done with the data analysis exercises, but we'd like to do one more thing to customize the look of the report.\n\n## Resize your figures\n\nWe can customize the output from a particular R chunk by including options in the header that will override any global settings.\n\n6.  In the R chunks you wrote for Exercises 2-5, customize the settings by modifying the **options** in the R chunks used to create those figures.\n\nFor Exercises 2, 3, and 4, we want square figures.\nWe can use `fig.height` and `fig.width` in the options to adjust the height and width of figures.\nModify the chunks in Exercises 2-4 to be as follows:\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r, eval = FALSE}}\n#| label: ex2-chunk-label\n#| fig-height: 5\n#| fig-width: 5\n\n# Your code that created the figure\n```\n````\n:::\n\n\nFor Exercise 5, modify your figure to have `fig-height` of 10 and `fig-width` of 6.\n\nNow, save and render.\n\nOnce you've created this PDF file, you're done!\n\n::: render-commit-push\nCommit all remaining changes with the commit message \"Done with Lab 1!\".\n\nThen push.\n:::\n\n# Submission\n\nMake sure to commit and push all of your changes (nothing should be left in the Git pane) to your repo.\nThen you're done!\n",
    "supporting": [
      "hw-1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}