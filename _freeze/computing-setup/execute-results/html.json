{
  "hash": "8ddb6f3adb9885515d5ff5066786b360",
  "result": {
    "markdown": "---\ntitle: \"Computing setup instructions\"\nexecute: \n  eval: false\n---\n\n\n# Let's get set up!\n\nThis page will introduce you to the course computing workflow.\nWe will set up everything you need in order to start using R, RStudio, Git, and GitHub--four powerful programs that you will be learning to use to analyze data in this class.\n\nR is a programming language, like Python, C++, Java, and many others.\nThat means it can be used to do all kinds of things.\nIts primary strength, however, is data analysis, and it is used by many social scientists, statisticians, data scientists, and others to clean, model, transform, and visualize all kinds of data.\n\nRStudio is an interface for using R\\--basically, a nice text editor with bells and whistles that are specific to writing code.\nThere are other ways to write programs in R, but most people use RStudio because it is both powerful and free.\n\n::: callout-tip\nR is the name of the programming language itself and RStudio is a convenient interface.\n:::\n\nGit and GitHub are the collaboration and version control system that we will be using throughout the course.\nThey can be used for any kind of file--not just R.\nIt is likely you'll run into them if you ever do any work involving writing code that needs to be made available to others.\n\n::: callout-tip\nGit is a version control system (like \"Track Changes\" features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like Box but much better).\n:::\n\nToday, we simply aim to get these four tools set up and talking to one another.\nThis can be a little tedious, but I ask that you stick with it--it only needs to be done once, and we will take as much time as we need to ensure it works for everyone.\n\nGoals: By time you go through the steps on this page and in the [tech-setup repo](https://github.com/soc333-sum23/tech-setup) that it pairs with, you will...\n\n-   Have a functioning R, RStudio, Git, and GitHub setup\n-   Have an introduction to our course workflow using R, RStudio, Git, and GitHub\n-   Gain practice writing a reproducible report using Quarto\n-   Practice version control using GitHub\n\n# Getting started\n\nI recommend you find someone with the same operating system as you to work together on this with.\n\n## Step 1: Download and install both [R](https://cran.r-project.org/) and [RStudio](https://posit.co/download/rstudio-desktop/)\n\nThose links again:\n\n-   Download R: <https://cran.r-project.org/>\n\n-   Download RStudio: <https://posit.co/download/rstudio-desktop/>\n\nFollow the instructions your computer gives you to install both programs.\n\n[These instructions](https://rstudio-education.github.io/hopr/starting.html) might help if you get stuck.\n\nNow open RStudio.\nYou should see a screen that looks something like this:\n\n![](images/rstudio.png)\n\nWe will go through what the different pieces of this interface are in more detail another day.\nFor now, all you need to know is that the box on the left hand side labeled \"Console\", where the blue \"\\>\" is, is where you will be copy/pasting and running the code that is given to you in the next sections.\n\n### Step 2: Install some packages\n\nYou will need a couple of what are called \"packages\" to complete the rest of these steps.\nPackages are basically bundles of code that people write and release that make it easier to do specific tasks in R.\n\nCopy and paste the following code into the RStudio console.\nThen hit enter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\")\ninstall.packages(\"gitcreds\")\n```\n:::\n\n\nYour computer might take a few moments to download and install the required code.\nThen you should see a message in the console saying `The downloaded binary packages are in`, followed by a file path.\nThis means the installation worked.\n\n## Set up Git and GitHub\n\nWe will be following the instructions in the [How to Set up Git]{.underline} section [of this webpage](https://rfortherestofus.com/2021/02/how-to-use-git-github-with-r/), **skipping** the subsections [Initialize a Git Repository]{.underline}, [View Commit History]{.underline}, and [Make a Commit and View More History.]{.underline}\n\nLook at the webpage if you like learning through videos.\nThis page contains the same instructions in text form, with copy-pastable code.\n\n### Step 3. Do you already have Git? \n\nOpen RStudio.\nLook at the console (left hand window).\nYou should see another tab right next to the word \"Console\" that says \"Terminal.\" Click on this.\nIn this window, paste the following code, then hit enter:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwhich git\n```\n:::\n\n\nThis checks if you have git installed.\nIf so, it will show a file path--something like `/usr/local/bin/git.` Congrats, you're good to go!\nMove to **Step 5.**\n\nIf instead you see something like `git: command not found` , you need to install git.\nProceed to **Step 3.**\n\n### Step 4: Install Git\n\nThe process varies somewhat by operating system (mac vs windows vs linux).\nI recommend following the appropriate [instructions here](https://happygitwithr.com/install-git.html#install-git-windows).\n\n### Step 5: Configure Git\n\nPaste the following code into the RStudio console (you may have to click back into the console if you are still in the terminal from Step 3), then hit enter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::edit_git_config()\n```\n:::\n\n\nThis will open a file with some information in it.\nAfter `name =` , write your name **in quotation marks**, eg `name = \"Aidan Combs\"` .\nThen provide your email where it says `email =`, also in quotation marks.\n**Use the email that is associated with your GitHub account.**\n\nOnce that information is entered, save the file.\n\n## Connect Git and GitHub to R and RStudio\n\nWe're still following [these instructions](https://rfortherestofus.com/2021/02/how-to-use-git-github-with-r/) (same page as above).\nNow, follow the directions in the [Connect RStudio and GitHub]{.underline} section.\n\nNot working?\nYou can try [these instructions](https://github.com/DukeStatSci/github_auth_guide) instead--a slightly different process that should lead to the same result.\n\n### Step 6: Create a Personal Access Token on GitHub\n\nYou already have a GitHub account, right?\nIf not, you need to make one before you go any further.\n\nPersonal access tokens are like passwords--they allow GitHub to make sure that it really is your computer that is trying to modify things in your account.\nHere you'll create a token in GitHub.\nThen in Step 7 you'll provide the same token to R.\nThen the two will be able to communicate with one another.\n\nEnter the following code in the RStudio console and hit enter:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_github_token()\n```\n:::\n\n\nThis will take you to the right page on GitHub.\nEnter a description.\n**Make sure you change the expiration to be longer than 30 days,** so that everything will keep working at least until the end of this course.\nYou can leave all other options at their default values.\n\nThen copy the token GitHub provides you to your clipboard.\nIt is best to leave this window open until the next step is finished so that you can re-copy this if needed.\n\n### Step 7: Store the personal access token to connect R/RStudio and GitHub\n\nEnter the following code in the RStudio console, then hit enter:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngitcreds::gitcreds_set()\n```\n:::\n\n\nEnter your GitHub username, and use the Personal Access Token you copied in Step 6 as your password (**not** your actual GitHub password--yes, it is confusing!)\n\n## Step 8: Clone the repo & start a new RStudio project\n\nEverything should now be set up!\nNow, we'll test whether it is working correctly.\n\nGo to the course organization at [https://github.com/soc333-sum23](#0){.uri}.\nClick on the repo with the prefix **tech-setup**.\nIt contains a document with which you will test that everything is set up correctly.\n\nClick on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**).\nClick on the clipboard icon to copy the repo URL.\n\nIn RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.\n\nCopy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n\nChange the default directory to something you'll be able to find later on your computer--I recommend making a folder just for this class, and keeping all of your repos in it!\n\nClick *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n\nClick *tech-setup-test.qmd* to open the template Quarto file.\n\nFollow the instructions in the file to make a change and commit it.\n\n## It worked!\n\n-   Congrats! You're done with the most annoying and tedious part of this course!\n\n\n```{=html}\n<iframe src=\"https://giphy.com/embed/t3sZxY5zS5B0z5zMIz\" width=\"480\" height=\"270\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/nhl-sports-hockey-fan-t3sZxY5zS5B0z5zMIz\">via GIPHY</a></p>\n```\n\n## It didn't work...\n\n-   Can't seem to get it? No worries--come talk to me and we'll get it sorted out.\n-   Depending on your setup, it may be simpler to access RStudio through containers. Containers allow you to code through a browser, meaning you can skip all the downloading steps (though you still must connect RStudio and GitHub). See [these instructions](https://github.com/sta199-f22-1/sta199-f22-1.github.io/blob/main/labs/lab-0.qmd) for how to set this up.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}