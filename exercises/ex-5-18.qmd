---
title: "5/18/23"
categories: "Exercise"
execute:
  eval: false
editor: 
  markdown: 
    wrap: sentence
---

# Exercise structure and requirements

Before we begin, a word about how this (and likely future) exercises will be structured, and what you are required to do with them.

We will walk through exercises in class and use them as opportunities to try out applying the lecture material.
We will do it this way because often, things make more sense if you can see right away how they are used to solve a problem.

Once you are set up on GitHub, you will access these files in RStudio, rather than through the course webpage (as you are probably doing now).
That means you will be able to (and will be required to) edit the files directly to answer the questions they provide.
You will have to edit these files in a few specified places (you may also edit them further to try things out or to take notes, if you wish--I will only grade the edits I ask for).

Problems or questions that I expect you to address will be wrapped in a note (example below).

::: callout-note
This is a note.
Notes will contain problems and questions you need to provide an answer to.
:::

For this exercise, you will submit your response via the assignments tab in Sakai.
After this, you will instead submit exercises by pushing your edits to GitHub.
More details to follow in future.

You will have to complete an exercise most days that we have class.
I expect you should be able to complete most of it in class.
You should submit it before the start of the next class period.
I will grade them for completion.
If you are absent from class, you are still required to complete the day's exercise, but will have to do so on your own.

# Let's get set up!

This exercise will introduce you to the course computing workflow.
We will set up everything you need in order to start using R, RStudio, Git, and GitHub--four powerful programs that you will be learning to use to analyze data in this class.

R is a programming language, like Python, C++, Java, and many others.
That means it can be used to do all kinds of things.
Its primary strength, however, is data analysis, and it is used by many social scientists, statisticians, data scientists, and others to clean, model, transform, and visualize all kinds of data.

RStudio is an interface for using R\--basically, a nice text editor with bells and whistles that are specific to writing code.
There are other ways to write programs in R, but most people use RStudio because it is both powerful and free.

::: callout-tip
R is the name of the programming language itself and RStudio is a convenient interface.
:::

Git and GitHub are the collaboration and version control system that we will be using throughout the course.
They can be used for any kind of file--not just R.
It is likely you'll run into them if you ever do any work involving writing code that needs to be made available to others.

::: callout-tip
Git is a version control system (like "Track Changes" features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like Box but much better).
:::

Today, we simply aim to get these four tools set up and talking to one another.
This can be a little tedious, but I ask that you stick with it--it only needs to be done once, and we will take as much time as we need to ensure it works for everyone.

Goals: By the end of the exercise, you will...

-   Have a functioning R, RStudio, Git, and GitHub setup
-   Be familiar with our course workflow using R, RStudio, Git, and GitHub
-   Gain practice writing a reproducible report using Quarto
-   Practice version control using GitHub
-   Be able to create data visualizations using `ggplot2`

# Getting started

Find someone with the same operating system as you to work together on this with.

## Download and install both [R](https://cran.r-project.org/) and [RStudio](https://posit.co/download/rstudio-desktop/)

Those links again:

-   Download R: <https://cran.r-project.org/>

-   Download RStudio: <https://posit.co/download/rstudio-desktop/>

Follow the instructions your computer gives you to install both programs.

[These instructions](https://rstudio-education.github.io/hopr/starting.html) might help if you get stuck.

Now open RStudio.
You should see a screen that looks something like this:

![](images/rstudio.png)

We will go through what the different pieces of this interface are in more detail another day.
For now, all you need to know is that the box on the left hand side labeled "Console", where the blue "\>" is, is where you will be copy/pasting the code that is given to you in the next sections.

## Set up Git and GitHub

We will be following the instructions [on this webpage](https://rfortherestofus.com/2021/02/how-to-use-git-github-with-r/) to set up Git and GitHub.
I have written out the code pieces you need here so that you can copy/paste them into your console.

## Connect Git and Github to R and RStudio

We're still following [these instructions](https://rfortherestofus.com/2021/02/how-to-use-git-github-with-r/) (same page as above).

## Log in to RStudio

-   Go to <https://cmgr.oit.duke.edu/containers> and log in with your Duke NetID and Password.
-   Find RStudio in the `Reservations Available` pane and click "reserve RStudio"
-   Click `RStudio` in the `My Reservations` pane to log into the Docker container. You should now see the RStudio environment.

## Get familiar with RStudio

SCREENSHOT HERE

RStudio contains four panes which allow you to do different things.

1.  **Editor**.
    This is where you will make edits to files.
    It will not appear until you open a file.
    Code written here can be saved, run, edited, and saved again.
    It is the main place where you will write and edit your work.

2.  **Console.** Displays results of code you run.
    You can also write and run code from here, but it will not be save-able.
    It is useful for brief, tangential tasks that only need to happen once, like checking quick things, installing packages, and running code to change settings and configure things (like we will do later on in this exercise).

3.  **Environment.** The environment gives you information about the data and variables you have created.
    It also contains a pane you will use to save your work to GitHub.

4.  **Files/plots/help.** This window contains a smorgasbord of other helpful panes that give you information on your files and packages and display plots and help documentation.

## Set up your SSH key

You will authenticate GitHub using SSH.
Below are an outline of the authentication steps.

::: callout-note
You only need to do this authentication process one time on a single system.
:::

-   Type `credentials::ssh_setup_github()` into your console.
-   R will ask "No SSH key found. Generate one now?" You should click 1 for yes.
-   You will generate a key. It will begin with "ssh-rsa...." R will then ask "Would you like to open a browser now?" You should click 1 for yes.
-   You may be asked to provide your GitHub username and password to log into GitHub. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., `sta199`).

You can find more detailed instructions [here](https://github.com/DukeStatSci/github_auth_guide) if you're interested.

## Configure Git

There is one more thing we need to do before getting started on the assignment.
Specifically, we need to configure your git so that RStudio can communicate with GitHub.
This requires two pieces of information: your name and email address.

To do so, you will use the `use_git_config()` function from the `usethis` package.
(And we also need to install a package called `gert` just for this step.)

Type the following lines of code in the **console** in RStudio filling in your name and the email address associated with your GitHub account.

```{r}
devtools::install_github("r-lib/gert")

usethis::use_git_config(
  user.name = "Your name", 
  user.email = "Email associated with your GitHub account"
  )
```

For example, mine would be

```{r}
devtools::install_github("r-lib/gert")

usethis::use_git_config(
  user.name = "Mine Çetinkaya-Rundel", 
  user.email = "cetinkaya.mine@gmail.com"
  )
```

You are now ready interact with GitHub via RStudio!

## Clone the repo & start new RStudio project

-   Go to the course organization at <https://github.com/soc333-sum23> organization on GitHub.
    Click on the repo with the prefix **hw-1**.
    It contains the starter documents you need to complete the homework.

-   Click on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**).
    Click on the clipboard icon to copy the repo URL.

-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.

-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.

-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.

-   Click *lab-0-datasaurus.qmd* to open the template Quarto file.
    This is where you will write up your code and narrative for the lab.

## R and R Studio

Below are the components of the RStudio IDE.

![](images/lab-0/rstudio.png){fig-alt="RStudio IDE"}

Below are the components of a Quarto (.qmd) file.

![](images/lab-0/quarto.png){fig-alt="Quarto document"}

## YAML

The top portion of your R Markdown file (between the three dashed lines) is called **YAML**.
It stands for "YAML Ain't Markup Language".
It is a human friendly data serialization standard for all programming languages.
All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.

::: callout-important
Open the Quarto (`.qmd`) file in your project, change the author name to your name, and render the document.
Examine the rendered document.
:::

## Committing changes

Now, go to the Git pane in your RStudio instance.
This will be in the top right hand corner in a separate tab.

If you have made changes to your Quarto (.qmd) file, you should see it listed here.
Click on it to select it in this list and then click on **Diff**.
This shows you the *diff*erence between the last committed state of the document and its current state including changes.
You should see deletions in red and additions in green.

If you're happy with these changes, we'll prepare the changes to be pushed to your remote repository.
First, **stage** your changes by checking the appropriate box on the files you want to prepare.
Next, write a meaningful commit message (for instance, "updated author name") in the **Commit message** box.
Finally, click **Commit**.
Note that every commit needs to have a commit message associated with it.

You don't have to commit after every change, as this would get quite tedious.
You should commit states that are *meaningful to you* for inspection, comparison, or restoration.

Now let's make sure all the changes went to GitHub.
Go to your GitHub repo and refresh the page.
You should see your commit message next to the updated files.
If you see this, all your changes are on GitHub and you're good to go!

## Push changes

Now that you have made an update and committed this change, it's time to push these changes to your repo on GitHub.

In order to push your changes to GitHub, you must have **staged** your **commit** to be pushed.
click on **Push**.

# Packages

In this lab we will work with two packages:

-   **datasauRus** which contains the dataset, and
-   **tidyverse** which is a collection of packages for doing data analysis in a "tidy" way.

**Render** the document which loads these two packages with the `library()` function.

::: callout-note
The rendered document will include a message about which packages the tidyverse packages is loading along with it.
It's just R being informative, a **message** does not indicate anything is wrong (it's not a **warning** or an **error**).
:::

The tidyverse is a meta-package.
When you load it you get eight packages loaded for you:

-   **ggplot2**: for data visualization
-   **dplyr**: for data wrangling
-   **tidyr**: for data tidying and rectangling
-   **readr**: for reading and writing data
-   **tibble**: for modern, tidy data frames
-   **stringr**: for string manipulation
-   **forcats**: for dealing with factors
-   **purrr**: for iteration with functional programming

The message that's printed when you load the package tells you which versions of these packages are loaded as well as any conflicts they may have introduced, e.g., the `filter()` function from dplyr has now masked (overwritten) the `filter()` function available in base R (and that's ok, we'll use `dplyr::filter()` anyway).

You can now **Render** your template document and see the results.
