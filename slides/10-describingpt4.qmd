---
title: "Describing data: part 4"
subtitle: "Lecture 10"
date: "June 5, 2023"
format: revealjs
---

```{r, include = FALSE}
library(tidyverse)
library(openintro)
```

## Logistics {.smaller}

-   Project component 2: descriptive statistics

    -   All materials are posted (instructions, example, github repos)
    -   I will have feedback to you on your research questions soon
    -   After that, you'll be able to do parts 1-3. Material for part 4 will be Monday.
    -   Due Tuesday June 6 11:59pm
    -   We will save some time to work on it in class Monday or Tuesday--start before then, come with questions!

## Today

-   Answers to filtering
-   Pipes
-   Working on creating variables
-   Answers to creating variables


## Exercise: Creating new variables

-   Clone and open the project repo now (**ex-6-1-yourusername**)
-   Then open the .qmd file and try out some variable creation

    -   [Instructions: Computing -\> Cloning and committing](https://soc333-sum23.github.io/computing-clonerepo.html)
 
## Stringing commands together with pipes (`|>`) {.smaller}

::: incremental
-   Often we need to change data frames in more than one way
-   Back to our starting example: how does employment status vary by age category? 
-   We need to create an age category variable (as we talked about above)
-   But we probably want to filter too--why analyze kids?
:::

## Stringing commands together: approach 1 {.smaller}

We can do this with the tools we have.

. . . 

```{r}
acs12_newagevar <- mutate(acs12, agecat = case_when(age < 14 ~ "child",
                                                    age < 18 ~ "teen",
                                                    age < 67 ~ "adult",
                                                    TRUE ~ "retired"))
acs12_nokids <- filter(acs12_newagevar, agecat != "child")

table(acs12_nokids$agecat, useNA = "always")
```
   
. . . 

-   But it's kind of ugly... we don't need to save that middle step

## Stringing commands together: approach 2, with `|>` {.smaller}

::: incremental
-   The pipe operator, `|>`, lets us pass the result of one function directly into another one
-   The `|` symbol is the key below "delete" on your keyboard (not I, not l, not 1)
-   It replaces the first mutate/filter argument (the dataset)
-   "Take the thing that came before this and give it to the function that comes after this"
:::

. . . 

```{r}
acs12_nokids <- acs12 |> 
  mutate(agecat = case_when(age < 14 ~ "child",
                            age < 18 ~ "teen",
                            age < 67 ~ "adult",
                            TRUE ~ "retired")) |> 
  filter(agecat != "child")

table(acs12_nokids$agecat, useNA = "always")
```

## Another `|>` example {.smaller}

-   This: 

```{r, eval = FALSE}
mutate(acs12, agecat = case_when(age < 14 ~ "child",
                                 age < 18 ~ "teen",
                                 age < 67 ~ "adult",
                                 TRUE ~ "retired"))
```

-   Is the same as this:

```{r, eval = FALSE}
acs12 |> 
  mutate(agecat = case_when(age < 14 ~ "child",
                            age < 18 ~ "teen",
                            age < 67 ~ "adult",
                            TRUE ~ "retired"))
```

## More on `|>` {.smaller}

::: incremental
-   We're just scratching the surface in this class
-   When you need to clean your data or when your analyses are more complex, `|>` makes your life a lot easier!
-   Sometimes in internet resources more than ~2 years old, you'll see `%>%` instead--this older version does exactly the same thing
-   Annoying to type out? There's a keyboard shortcut

    -   on mac, command-shift-M
    -   on pc, ctrl-shift-M
:::

