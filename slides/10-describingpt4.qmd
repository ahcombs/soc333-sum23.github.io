---
title: "Describing data: part 4"
subtitle: "Lecture 10"
date: "June 5, 2023"
format: revealjs
smaller: true
---

```{r, include = FALSE}
library(tidyverse)
library(openintro)
```

## Logistics {.smaller}

-   Project component 2: descriptive statistics

    -   All materials are posted (instructions, example, github repos)
    -   Due **Wednesday June 7** 11:59pm
    -   I have returned feedback (GitHub issue on your repo) and grades (Sakai) for your proposals
    -   We have covered everything for parts 1-3. Part 4 is today and tomorrow.

## Today

-   Answers to filtering
-   Pipes
-   Working on creating variables
-   Answers to creating variables
-   Plots

## Filtering exercise (ex-5-31): answers!

-   Find this on your computer (no need to clone it again)

## Stringing commands together with pipes (`|>`) {.smaller}

::: incremental
-   Often we need to change data frames in more than one way
-   Example from last week: How does employment status vary by age category?
-   We need to create an age category variable (as we talked about Thursday)
-   But we probably want to filter too--why analyze kids?
:::

## Stringing commands together: approach 1 {.smaller}

We can do this with the tools we have.

. . .

```{r}
# first we make the new variable
acs12_newagevar <- mutate(acs12, agecat = case_when(age < 14 ~ "child",
                                                    age < 18 ~ "teen",
                                                    age < 67 ~ "adult",
                                                    TRUE ~ "retired"))

# then we filter to remove children
acs12_nokids <- filter(acs12_newagevar, agecat != "child")

# did it work?
table(acs12_nokids$agecat, useNA = "always")
```

. . .

-   But it's kind of ugly... we don't need to save that middle step

## Stringing commands together: approach 2, with `|>` {.smaller}

::: incremental
-   The pipe operator, `|>`, lets us pass the result of one function directly into another one
-   The `|` symbol is the key below "delete" on your keyboard (not I, not l, not 1)
-   It replaces the first mutate/filter argument (the dataset)
-   "Take the thing that came before this and give it to the function that comes after this"
:::

. . .

```{r}
acs12_nokids <- acs12 |> # start with acs12
  mutate(agecat = case_when(age < 14 ~ "child", #then add a new variable to it
                            age < 18 ~ "teen",
                            age < 67 ~ "adult",
                            TRUE ~ "retired")) |> 
  filter(agecat != "child") # then filter out the kids

table(acs12_nokids$agecat, useNA = "always")
```

## Another `|>` example {.smaller}

-   This:

```{r, eval = FALSE}
mutate(acs12, agecat = case_when(age < 14 ~ "child",
                                 age < 18 ~ "teen",
                                 age < 67 ~ "adult",
                                 TRUE ~ "retired"))
```

-   Is the same as this:

```{r, eval = FALSE}
acs12 |> 
  mutate(agecat = case_when(age < 14 ~ "child",
                            age < 18 ~ "teen",
                            age < 67 ~ "adult",
                            TRUE ~ "retired"))
```

## More on `|>` {.smaller}

::: incremental
-   We're just scratching the surface in this class

-   When you need to clean your data or when your analyses are more complex, `|>` makes your life a lot easier!

-   Sometimes in internet resources more than \~2 years old, you'll see `%>%` instead--this older version does exactly the same thing

-   Annoying to type out?
    There's a keyboard shortcut

    -   on mac, command-shift-M
    -   on pc, ctrl-shift-M
:::

## Continuing on creating new variables

-   Find your exercise from last Thursday (ex-6-01)

    -   No need to clone it again; find where it's saved on your computer

-   There are hints on the website--use them if you get stuck
-   10-15 minutes to work

# Creating new variables: answers!

## Finding help in R

-   #1: Your classmates and I!

    -   Copy/pasting from slides and editing the pieces you need is a good strategy

. . .

-   Documentation! Use `?`

```{r}
?median
```

## Finding help in R

-   Cheatsheets!

    -   Relevant ones are on the course website: [Computing -> Cheatsheets](https://soc333-sum23.github.io/computing-cheatsheets.html)
    -   More at [https://posit.co/resources/cheatsheets/](https://posit.co/resources/cheatsheets/)
    
. . .

-   Google!

    -   Try "how to calculate the median in r" rather than "r how to calculate median"
    -   StackOverflow/StackExchange is good
    -   Paste in your error message
    -   **Cite your sources**
  
. . .

-   A book!

    -   [R for Data Science](https://r4ds.had.co.nz/)
    
. . .

-   Campus resources!

    -   [Center for Data Visualization Sciences](https://library.duke.edu/data/about)

## Finding help in R

-   ChatGPT??

. . .

    -   ...eh. It can WRITE code, but it can't test it... so what it gives you probably won't work.

# Plots

## Why plot?

![](images/10/homeownership_table.png)

::: aside
table from IMS ch 4
:::

## Why plot?

![](images/10/homeownership_plot.png)

::: aside
figure from IMS ch 4
:::

# Plotting a single variable

## Categorical data: bar charts

```{r, echo = FALSE}
acs12 |> 
  filter(!is.na(employment)) |> 
  ggplot(aes(x = employment)) + 
  geom_bar() + 
  labs(y = "",
       x = "Labor force status")
```

## Numeric data: histograms

```{r, echo = FALSE}
acs12 |> 
  filter(!is.na(hrs_work)) |> 
  ggplot(aes(x = hrs_work)) + 
  geom_histogram(binwidth = 5) + 
  labs(y = "Number of people",
       x = "Hours worked per week")
```

## How? With ggplot!

The basic structure of a plot: 

```{r, eval = FALSE}
ggplot(data = DATASET, aes(x = X.VARIABLE, 
                           y = Y.VARIABLE,
                           OTHER.STUFF)) + 
  geom_XXXX()
```

## Back to the bar chart

```{r}
ggplot(data = acs12, # we want to plot the acs12 dataset
       aes(x = employment)) + # and specifically the employment variable, which should be on the x axis
  geom_bar() # and we want that plot to be a bar chart
```

. . . 

-   It's there but it's ugly!

## Cleaning up the bar chart

-   Once we have a basic plot, we can add code to make it nicer

```{r}
ggplot(data = acs12, aes(x = employment)) + 
  geom_bar() + 
  # this changes our axis labels
  labs(y = "", # make the y axis labels blank
       x = "Labor force status") # Change the x axis label
```

## Cleaning up the bar chart

-   What about that NA bar? 
-   There are NAs in our plot because there are NAs in our data set

```{r}
table(acs12$employment, useNA = "always")
```

## Cleaning up the bar chart

-   We can use `filter()` to get rid of them before plotting the data

```{r}
# first we filter out the NAs
acs12_filtered <- filter(acs12, !is.na(employment))

# then we plot that new dataset
ggplot(data = acs12_filtered, aes(x = employment)) + 
  geom_bar() + 
  labs(y = "", 
       x = "Labor force status",
       # and let's add a title too
       title = "Number of people in each employment category"
       ) 
```

## Cleaning up the bar chart

-   We could have also used a pipe to do the same thing in one command

```{r}
# we start with acs12
acs12 |> 
  # then we filter out the NAs
  filter(!is.na(employment)) |> 
  # then we make our plot
  ggplot(aes(x = employment)) + 
  geom_bar() + 
  labs(y = "", 
       x = "Labor force status",
       # and let's add a title too
       title = "Number of people in each employment category"
  ) 
```

## Back to the histogram

-   It has exactly the same structure!

```{r}
ggplot(data = acs12, aes(x = hrs_work)) + 
  #notice that the geom is different--this is what specifies what kind of plot you want
  geom_histogram()
```

## Cleaning up the histogram

-   Two messages come up: 

    -   `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
    -   Warning: Removed 1041 rows containing non-finite values (`stat_bin()`).
    
. . . 

- Let's start with the second one

    -   When there are NA variables in categorical variables, R plots them as another category, in their own bar
    -   But when there are NA variables in numeric variables, R doesn't know what to do
    -   So here it's warning us that it dropped "non-finite" (ie, NA) values itself
    
## Cleaning up the histogram

-   It's better if we do that explicitly though
-   Same as the bar chart, let's filter out the NAs before plotting

```{r}
acs_filtered <- filter(acs12, !is.na(hrs_work))

ggplot(data = acs_filtered, aes(x = hrs_work)) + 
  geom_histogram()
```

## Cleaning up the histogram

-   Now what about that other message? 

    -   `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
    
```{r}
# Hmm. Let's check the function documentation. 
# Since it didn't give us this message last time, 
# it must have something to do with the histogram function.
?geom_histogram
```

## Cleaning up the histogram

-   The function documentation tells us that geom_histogram gives you two ways to set the width of the bars: `bins` and `binwidth`. 

    -   `binwidth` sets the width of each bar: eg, each bar should represent 5 hours worked, or 10
    -   We could use `bins` instead to tell R how many bars there should be--10 bars, 20 bars, etc
    
-   The message is telling us that R took its best dumb guess, but we should pick something better.

. . . 

```{r}
acs_filtered <- filter(acs12, !is.na(hrs_work))

ggplot(data = acs_filtered, aes(x = hrs_work)) + 
  # the binwidth argument goes inside the geom_histogram function
  # let's say that each bar should equal five hours--so 0-5 hours, 5-10, etc
  geom_histogram(binwidth = 5) 
```

## Cleaning up the histogram

-   Now we've eliminated all the messages--let's add labels!

```{r}
acs_filtered <- filter(acs12, !is.na(hrs_work))

ggplot(data = acs_filtered, aes(x = hrs_work)) + 
  geom_histogram(binwidth = 5) + 
  labs(x = "Number of hours worked per week",
       y = "Number of people",
       title = "Distribution of hours worked per week",
       subtitle = "American Community Survey 2012")
```


