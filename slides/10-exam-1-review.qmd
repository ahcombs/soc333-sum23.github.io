---
title: "Exam 1 Review"
subtitle: "Lecture 10"
date: "September 29, 2022"
format: revealjs
---

# Warm up

```{r}
#| echo: false

library(countdown)
```

## While you wait for class to begin...

Open your `ae-07` project in RStudio, render your document, and commit and push.

## Announcements {.smaller}

-   Exam 1 is released on today at noon and is due at 2pm on Monday.

    -   No TA OH during the exam.

    -   I will have OH 4-5pm on Friday on Zoom: [bit.ly/minezoom](https://bit.ly/minezoom)

    -   Any clarification questions must be **emailed to me** only.

    -   No Slack use during the exam, even about non-exam related questions.

# From last time

## Continue from last time: `ae-07`

::: appex
-   Go to your container and open your `ae-07` project.
-   Render, commit, and push.

::: callout-important
You might see an error.
Read it and do as it says!
:::

-   Pull.

-   Once again, render, commit, and push.
:::

# Exam 1 review

## Logistics questions {.smaller}

-   **Can we use outside sources for our code on the exam as long as we cite where it's from.**

Yes!
However, you should be striving the solve the questions in the style that we learned.
For example, ggplot2 is not the only plotting package in R.
But we expect you to use ggplot2 when making plots, not another system.

. . .

-   **Will content on lab 3 be on the exam? If so, will we be able to access an answer key at some point during the exam period?**

Yes, will be posted Friday at midnight.

. . .

-   **When asked to replicate a graph, should we also adjust fig height/width?**

Yes, though you shouldn't worry about matching it exactly.
More that it should be legible and if the plot you're replicating is wider than taller, the plot you're submitting should be as well.

## Packages

```{r}
library(tidyverse)
```

## Operators in R: `<-` vs. `=` {.smaller}

-   `<-`: assignment
-   `=`: equals

```{r}
#| eval: false

# good
x <- 2

# works, but bad
x = 2

# doesn't work
df <- df |>
  mutate(x <- 2)

# good
df <- df |>
  mutate(x = 2)
```

## Operators in R: `=` vs. `==` vs. `%in%` {.smaller}

-   `==`: is equal to
-   `%in%`: in

```{r}
x = c(1, 2, 3)
y = c(3, 4, 5)

# do elements in x equal those in y?
# check if each element in x is equal to the 
# corresponding element in y
x == y
```

. . .

```{r}
# are any elements in x also in y?
# check if any element in x is equal to any element in y
x %in% y
```

. . .

```{r}
# set x equal to y
x = y
x
```

## `%in%` vs `==` {.smaller}

```{r}
df <- tibble(
  x = c(1, 2, 3, 4),
  y = c("a", "b", "c", "d")
  )
df

# Filter for x is 2
df |>
  filter(x == 2)
```

## `%in%` vs `==` {.smaller}

```{r}
# Filter for x is 2 or 3
df |>
  filter(x == c(2, 3))

# Filter for x is 2 or 3
df |>
  filter(x %in% c(2, 3))
```

## Operators in R: `|>` vs. `%>%` 

-   `|>`: pipe operator (newer -- what we've been using in class)
-   `%>%`: pipe operator (older -- what you see in the videos)
-   They *effectively* do the same thing

## Interpreting data visualizations I {.smaller}

::: question
Provide a 1-2 sentence interpretation of the relationship between city and highway mileage of cars.
:::

```{r}
#| output-location: column

ggplot(
  mpg,
  aes(x = cty, y = hwy)
) +
  geom_jitter(alpha = 0.5) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    x = "City MPG", 
    y = "Highway MPG"
  )
```

## Interpreting data visualizations II {.smaller}

::: question
Provide a 1-2 sentence interpretation of the relationship between city and highway mileage of cars, taking into consideration whether they're 4 wheel drive, front wheel drive, or rear wheel drive.
:::

```{r}
#| output-location: column

ggplot(
  mpg,
  aes(x = cty, y = hwy, color = drv)
) +
  geom_jitter(alpha = 0.5) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    x = "City MPG", 
    y = "Highway MPG"
  )
```

## `geom_jitter()` vs. `geom_point()` {.smaller}

::: question
The same dataset is plotted with `geom_jitter()` and `geom_point()` below.
Why do the two plots look different?
:::

::: columns
::: {.column width="50%"}
```{r}
#| echo: false

ggplot(
  mpg,
  aes(x = cty, y = hwy, color = drv)
) +
  geom_jitter() +
  labs(title = "geom_jitter()")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false

ggplot(
  mpg,
  aes(x = cty, y = hwy, color = drv)
) +
  geom_point() +
  labs(title = "geom_point()")
```
:::
:::

## `distinct()` {.smaller}

::: columns
::: {.column width="50%"}
```{r}
mpg |>
  select(cty, hwy)
```
:::

::: {.column width="50%"}

```{r}
mpg |>
  distinct(cty, hwy)
```
:::
:::

## Working with categorical data

```{r}
tshirts <- tibble(
  size = c("Large", "Medium", "Large", "Small", "Small", "Medium", "Small", "X-Large", "X-Small"),
  price = c(10, 15, 12, 18, 22, 13, 67, 12, 10)
)

ggplot(tshirts, aes(x = size)) +
  geom_bar()
```

## `fct_relevel()`

Reorder levels based on an order you provide

```{r}
tshirts |>
  mutate(size = fct_relevel(size, "X-Small", "Small", "Medium", "Large", "X-Large")) |>
  ggplot(aes(x = size)) +
  geom_bar()
```

## `fct_reorder()`

Reorder levels based on another variable

```{r}
tshirts |>
  mutate(size = fct_reorder(size, price, mean)) |>
  ggplot(aes(x = size)) +
  geom_bar()
```

## `fct_other()`

Lump some levels to "Other"

```{r}
tshirts |>
  mutate(size = fct_other(size, keep = c("Small", "Medium", "Large"))) |>
  ggplot(aes(x = size)) +
  geom_bar()
```

## Pivoting and joining

Let's visit [https://www.garrickadenbuie.com/project/tidyexplain](https://www.garrickadenbuie.com/project/tidyexplain/)!
