---
title: "Meet the toolkit"
subtitle: "Lecture 2"
date: "September 1, 2022"
format: revealjs
---

# Making STA 199 a success

## Five tips for success

1.  Complete all the preparation work before class.
2.  Ask questions.
3.  Do the readings and watch the videos.
4.  Do the homework and lab.
5.  Don't procrastinate and don't let a week pass by with lingering questions.

## Learning during a pandemic

I want to make sure that you learn everything you were hoping to learn from this class.
If this requires flexibility, please don't hesitate to ask.

::: incremental
-   You never owe me personal information about your health (mental or physical) but you're always welcome to talk to me. If I can't help, I likely know someone who can.
-   I want you to learn lots of things from this class, but I primarily want you to stay healthy, balanced, and grounded.
:::

## Course FAQ

**Q - What data science background does this course assume?**\
A - None.

. . .

**Q - Is this an intro stat course?**\
A - While statistics $\ne$ data science, they are very closely related and have tremendous of overlap.
Hence, this course is a great way to get started with statistics.
However this course is *not* your typical high school statistics course.

. . .

**Q - Will we be doing computing?**\
A - Yes.

## Course FAQ

**Q - Is this an intro CS course?**\
A - No, but many themes are shared.

. . .

**Q - What computing language will we learn?**\
A - R.

. . .

**Q: Why not language X?**\
A: We can discuss that over â˜•.

## Course toolkit {.smaller}

::: columns
::: {.column width="50%"}
**Course operation**

-   Materials: [sta199-f22-1.github.io](https://sta199-f22-1.github.io/)
-   Submission: Gradescope
-   Discussion: Slack
-   Gradebook: Sakai
:::

::: {.column width="50%"}
**Doing data science**

-   Computing:
    -   R
    -   RStudio
    -   tidyverse
    -   Quarto
-   Version control and collaboration:
    -   Git
    -   GitHub
:::
:::

# Toolkit: Computing

## Learning goals {.smaller}

By the end of the course, you will be able to...

::: incremental
-   gain insight from data
-   gain insight from data, **reproducibly**
-   gain insight from data, reproducibly, **using modern programming tools and techniques**
-   gain insight from data, reproducibly **and collaboratively**, using modern programming tools and techniques
-   gain insight from data, reproducibly **(with literate programming and version control)** and collaboratively, using modern programming tools and techniques
:::

# Reproducible data analysis

## Reproducibility checklist {.smaller}

::: question
What does it mean for a data analysis to be "reproducible"?
:::

. . .

**Near-term goals:**

-   Are the tables and figures reproducible from the code and data?
-   Does the code actually do what you think it does?
-   In addition to what was done, is it clear *why* it was done?

. . .

**Long-term goals:**

-   Can the code be used for other data?
-   Can you extend the code to do other things?

## Toolkit for reproducibility

-   Scriptability $\rightarrow$ R
-   Literate programming (code, narrative, output in one place) $\rightarrow$ Quarto
-   Version control $\rightarrow$ Git / GitHub

# R and RStudio

## R and RStudio {.smaller}

::: columns
::: {.column width="50%"}
![](images/02/r-logo.png){fig-alt="R logo" fig-align="center"}

-   R is an open-source statistical **programming language**
-   R is also an environment for statistical computing and graphics
-   It's easily extensible with *packages*
:::

::: {.column .fragment width="50%"}
![](images/02/rstudio-logo.png){fig-alt="RStudio logo"}

-   RStudio is a convenient interface for R called an **IDE** (integrated development environment), e.g. *"I write R code in the RStudio IDE"*
-   RStudio is not a requirement for programming with R, but it's very commonly used by R programmers and data scientists
:::
:::

## R vs. RStudio

[![](images/02/r_vs_rstudio.png){fig-alt="On the left: a car engine. On the right: a car dashboard. The engine is labelled R. The dashboard is labelled RStudio." fig-align="center" width="1001"}](https://moderndive.com/1-getting-started.html)

::: aside
Source: [Modern Dive](https://moderndive.com/1-getting-started.html).
:::

## R packages

::: incremental
-   **Packages**: Fundamental units of reproducible R code, including reusable R functions, the documentation that describes how to use them, and sample data<sup>1</sup>

-   As of September 2022, there are over 18,000 R packages available on **CRAN** (the Comprehensive R Archive Network)<sup>2</sup>

-   We're going to work with a small (but important) subset of these!
:::

::: aside
<sup>1</sup> Wickham and Bryan, [R Packages](https://r-pkgs.org/).

<sup>2</sup> [CRAN contributed packages](https://cran.r-project.org/web/packages/).
:::

## Tour: R and RStudio

![](images/02/tour-r-rstudio.png)

## A short list (for now) of R essentials

-   Functions are (most often) verbs, followed by what they will be applied to in parentheses:

```{r}
#| eval: false

do_this(to_this)
do_that(to_this, to_that, with_those)
```

. . .

-   Packages are installed with the `install.packages()` function and loaded with the `library` function, once per session:

```{r}
#| eval: false

install.packages("package_name")
library(package_name)
```

## R essentials (continued)

-   Columns (variables) in data frames are accessed with `$`:

```{r}
#| eval: false

dataframe$var_name
```

. . .

-   Object documentation can be accessed with `?`

```{r}
#| eval: false

?mean
```

## tidyverse

::: columns
::: {.column width="50%"}
[![](images/02/tidyverse.png){fig-alt="Hex logos for dplyr, ggplot2, forcats, tibble, readr, stringr, tidyr, and purrr"}](https://tidyverse.org)
:::

::: {.column width="50%"}
[tidyverse.org](https://www.tidyverse.org/)

-   The **tidyverse** is an opinionated collection of R packages designed for data science
-   All packages share an underlying philosophy and a common grammar
:::
:::

# Quarto

## Quarto

::: incremental
-   Fully reproducible reports -- each time you render the analysis is ran from the beginning
-   Code goes in chunks narrative goes outside of chunks
-   A visual editor for a familiar / Google docs-like editing experience
:::

## Tour: Quarto

![](images/02/tour-quarto.png){fig-alt="RStudio IDE with a Quarto document, source code on the left and output on the right. Annotated to show the YAML, a link, a header, and a code chunk." fig-align="center"}

## Environments

::: callout-important
The environment of your Quarto document is separate from the Console!
:::

Remember this, and expect it to bite you a few times as you're learning to work with Quarto!

## Environments

::: columns
::: {.column width="50%"}
First, run the following in the console:

```{r eval = FALSE}
x <- 2
x * 3
```

<br>

::: {.question .fragment}
All looks good, eh?
:::
:::

::: {.column .fragment width="50%"}
Then, add the following in an R chunk in your Quarto document

```{r}
#| eval: false

x * 3
```

<br>

::: {.question .fragment}
What happens?
Why the error?
:::
:::
:::

## How will we use Quarto?

-   Every assignment / report / project / etc. is an Quarto document
-   You'll always have a template Quarto document to start with
-   The amount of scaffolding in the template will decrease over the semester

## What's with all the hexes?

![](images/02/hexes.jpeg){fig-alt="Hex logos for many packages" fig-align="center"}

## Your turn! {.smaller}

::: appex
`ae-0-bechdel-quarto`

-   [The Bechdel test](https://en.wikipedia.org/wiki/Bechdel_test) asks whether a work of fiction features at least two women who talk to each other about something other than a man, and there must be two women named characters.
-   Go to the [course GitHub organization](https://github.com/sta199-f22-1) and clone [`ae-0-bechdel-quarto`](https://github.com/sta199-f22-1/ae-0-bechdel-quarto) to [your container](https://cmgr.oit.duke.edu/containers).
-   Open and render the Quarto document `bechdel.qmd`, review the document, and fill in the blanks.
:::

# Toolkit: Version control and collaboration

## Git and GitHub {.smaller}

::: columns
::: {.column width="50%"}
![](images/02/git-logo.png){fig-alt="Git logo" fig-align="center" width="200"}

-   Git is a version control system -- like "Track Changes" features from Microsoft Word, on steroids
-   It's not the only version control system, but it's a very popular one
:::

::: {.column width="50%"}
![](images/02/github-logo.png){fig-alt="GitHub logo" fig-align="center" width="200"}

-   GitHub is the home for your Git-based projects on the internet -- like DropBox but much, much better

-   We will use GitHub as a platform for web hosting and collaboration (and as our course management system!)
:::
:::

## Versioning

![](images/02/lego-steps.png){fig-align="center"}

## Versioning

### with human readable messages

![](images/02/lego-steps-commit-messages.png){fig-align="center"}

## How will we use Git and GitHub

![](images/02/whole-game-01.png){fig-align="center"}

## How will we use Git and GitHub?

![](images/02/whole-game-02.png){fig-align="center"}

## How will we use Git and GitHub?

![](images/02/whole-game-03.png){fig-align="center"}

## How will we use Git and GitHub?

![](images/02/whole-game-04.png){fig-align="center"}

## Git and GitHub tips {.smaller}

::: incremental
-   There are millions of git commands -- ok, that's an exaggeration, but there are a lot of them -- and very few people know them all. 99% of the time you will use git to add, commit, push, and pull.
-   We will be doing Git things and interfacing with GitHub through RStudio, but if you google for help you might come across methods for doing these things in the command line -- skip that and move on to the next resource unless you feel comfortable trying it out.
-   There is a great resource for working with git and R: [happygitwithr.com](http://happygitwithr.com/). Some of the content in there is beyond the scope of this course, but it's a good place to look for help.
:::

## Tour: Git + GitHub

-   In Lab 0 next Monday!
-   Make sure to create a GitHub account and fill out the Getting to know you survey!
